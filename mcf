#!/usr/bin/python3
# Copyright (c) 2008 - 2012 Hewlett-Packard Development Company, L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from __future__ import with_statement, print_function, unicode_literals, absolute_import, division

import argparse
import errno
import logging
import os
import subprocess
import sys
import re
import urllib

logger = logging.getLogger(__name__)

submodules = {}

def echo_check_call(todo, verbosity, cwd=None):
   if verbosity:
      cmd = 'set -x; ' + todo
   else:
      cmd = todo
   
   return subprocess.check_call(cmd,
                                stdout=sys.stdout,
                                stderr=sys.stderr,
                                shell=True,
                                cwd=cwd)


# Essentially, mcf parses options, creates mcf.status, and runs mcf.status.

def process_file(ifile, ofile, replacements):
    statusfilename = ifile
    statusfile = open(statusfilename, 'r')
    status = statusfile.read()
    statusfile.close()

    for i, j in replacements:
        status = status.replace(i, j)

    statusfile = open(ofile, 'w')
    statusfile.write(status)
    statusfile.close()
    return

def getopts():
    parser = argparse.ArgumentParser(description='Options')
    
    general = parser.add_argument_group('General Options')

    verbosity = general.add_mutually_exclusive_group()

    verbosity.add_argument('-s', '--silent', dest='verbose',
                         action='store_false', default=False,
                         help='work silently')

    verbosity.add_argument('-v', '--verbose', dest='verbose',
                       action='store_true', default=False,
                       help='work verbosely')

    general.add_argument('-x', '--trace', action='store_true', help='trace')
        
    general.add_argument('-r','--enable-remote-layers', dest='remote', help='Grab the weboslayers.py file from a remote url (default: none)',
                         default="")

    variations = parser.add_argument_group('Build Instructions')

    variations.add_argument('-p', '--enable-parallel-make', dest='parallel_make', type=int, default=1,
                            help='maximum number of parallel tasks each submake of bitbake should spawn (default: 1)')

    variations.add_argument('-b', '--enable-bb-number-threads', dest='bb_number_threads', type=int, default=1,
                            help='maximum number of bitbake tasks to spawn (default: 1)')

    partitions = parser.add_argument_group('Source Identification')

    mirrors = parser.add_argument_group('Networking and Mirrors')

    network = mirrors.add_mutually_exclusive_group()

    network.add_argument('--disable-network', dest='network', action='store_false', default=True,
                         help='disable fetching through the network (default: False)')

    network.add_argument('--enable-network', dest='network', action='store_true', default=True,
                         help='enable fetching through the network (default: True)')

    default_premirror = 'http://downloads.yoctoproject.org/mirror/sources'
    mirrors.add_argument('--enable-premirror', dest='premirror', help='set premirror (default: {})'.format(default_premirror),
                         default=default_premirror)

    premirroronly = mirrors.add_mutually_exclusive_group()
    premirroronly.add_argument('--disable-fetch-premirror-only', dest='fetchpremirroronly', action='store_false', default=False,
                               help='disable fetching through the network (default: False)')

    premirroronly.add_argument('--enable-fetch-premirror-only', dest='fetchpremirroronly', action='store_true', default=False,
                               help='enable fetching through the network (default: True)')

    tarballs = mirrors.add_mutually_exclusive_group()
    tarballs.add_argument('--disable-generate-mirror-tarballs', dest='generatemirrortarballs', action='store_false', default=False,
                          help='disable tarball generation of fetched components (default: True)')

    tarballs.add_argument('--enable-generate-mirror-tarballs', dest='generatemirrortarballs', action='store_true', default=False,
                          help='generate tarballs suitable for mirroring (default: False)')

    private = mirrors.add_mutually_exclusive_group()
    private.add_argument('--disable-private-internal-component-mirror', dest='privateinternalcomponentmirror', action='store_false',
                      default=False, help='disable the private internal component mirror (default: disabled)')

    private.add_argument('--enable-private-internal-component-mirror', dest='privateinternalcomponentmirror', action='store_true',
                      default=False, help='enable the private internal component mirror (default: disabled)')

    buildhistory = parser.add_argument_group('Buildhistory')

    buildhistory1 = buildhistory.add_mutually_exclusive_group()

    buildhistory1.add_argument('--disable-buildhistory', dest='buildhistory', action='store_false', default=True,
                              help='disable buildhistory functionality (default: False)')

    buildhistory1.add_argument('--enable-buildhistory', dest='buildhistory', action='store_true', default=True,
                              help='enable buildhistory functionality (default: True)')
    
    parser.add_argument('machines', nargs='*')

    return parser.parse_args()

WEBOSLAYERS = []
LAYERSPRIORITY = {}
SUBMISSIONS = {} 
LOCATIONS = {}
URLS = {}
PRIORITYORDER = []
COLLECTION_NAME = {}
COLLECTION_PATH = {}
DIRNAME = {}

def location_to_dirname(layer, location):
   str1 = location.split('/')
   DIRNAME[layer] = os.path.splitext(str1[len(str1)-1])[0]

def readlayers(path):
   sys.path.insert(0,path)
   if not os.path.isfile(os.path.join(path,'weboslayers.py')):
      print ("Error:" 'Configuration file {} does not exist!'.format(os.path.join(path,'weboslayers.py')))
      raise ("Error:" 'Configuration file {} does not exist!'.format(os.path.join(path,'weboslayers.py')))

   from weboslayers import webos_layers
   layerscount = 0
   for p in webos_layers:
        layerscount = layerscount + 1
        WEBOSLAYERS.append(p[0])
        PRIORITYORDER.append(p[1])
        LAYERSPRIORITY[p[0]] = p[1]
        URLS[p[0]] = p[2]
        SUBMISSIONS[p[0]] = p[3]
        LOCATIONS[p[0]] = p[4]
        if URLS[p[0]]:
           location_to_dirname(p[0], URLS[p[0]])
        if LOCATIONS[p[0]]:
           location_to_dirname(p[0], LOCATIONS[p[0]])

   PRIORITYORDER.sort()
   PRIORITYORDER.reverse()

   return layerscount

def readdistro(path):
   sys.path.insert(0,path)
   if not os.path.isfile(os.path.join(path,'weboslayers.py')):
      print ("Error:" 'Configuration file {} does not exist!'.format(os.path.join(path,'weboslayers.py')))
      raise ("Error:" 'Configuration file {} does not exist!'.format(os.path.join(path,'weboslayers.py')))

   from weboslayers import Distribution
   return Distribution

def downloadprojects(srcdir,verbosity):
   for layer in WEBOSLAYERS:
      if os.path.exists(os.path.abspath( DIRNAME[layer] ) ):
          print("Note:", 'Git repo {} exists! Skipping download.'.format(layer))
          continue
      if URLS[layer] and LOCATIONS[layer]:
          print("Error:", 'Both url and location are defined for {} layer!'.format(layer))
          raise("Error:", 'Both layer url and location are defined!')
      if not URLS[layer]:
          if not LOCATIONS[layer]:
             print("Error:", 'Must define {} git repo or location!'.format(layer))
             raise("Error:", 'Must define layer git repo or location!')
          continue

      BRANCH = ''
      COMMIT = ''
      TAG = ''
      for vgit in SUBMISSIONS[layer].split(','):
         if not vgit:
           continue
         str1, str2 = vgit.split('=')
         if str1.lower() == 'commit':
            if not COMMIT:
               COMMIT = str2
         elif str1.lower() == 'branch':
            BRANCH = str2
         elif str1.lower() == 'tag':
            if not COMMIT:
               COMMIT = str2

      if not BRANCH:
         BRANCH = 'work_branch'
      
      cmd = 'git clone -n {}'.format(URLS[layer])
      if echo_check_call(cmd,True):
         raise('Error: running {}'.format(cmd))
      if not (COMMIT and BRANCH):
         cmd = 'cd {0}; git checkout {1} {2}'.format(DIRNAME[layer], BRANCH, COMMIT)
      else:
         cmd = 'cd {0}; git checkout -B {1} {2}'.format(DIRNAME[layer], BRANCH, COMMIT)
      if echo_check_call(cmd,True):
          raise('Error: running {}'.format(cmd))

def parselayerconffiles (layername, root):
  f = open(os.path.join(os.path.abspath(root), "conf", "layer.conf"), 'r')
  lines = f.readlines()
  f.close
  for line in lines:
    if re.search( 'BBFILE_COLLECTIONS' , line):
      (dummy, collectionname) = line.rsplit('=')
      collectionname = collectionname.strip()
      collectionname = collectionname.strip("\"")
      COLLECTION_NAME[layername] = collectionname

def traversedir (root):
  for path, dirs, files in os.walk(root):
    for filename in files:
       if filename == 'layer.conf':
         ( collectionpath, dummy) = os.path.split(path)
         ( dymmy, layername) = os.path.split(collectionpath)
         parselayerconffiles(layername, collectionpath)
         COLLECTION_PATH[layername] = collectionpath
         break

def parseCollections (srcdir):
    for layer in WEBOSLAYERS:
      if ( URLS[layer] ):
         pathstr = DIRNAME[layer]
      if ( LOCATIONS[layer] ):
         pathstr = os.path.abspath( LOCATIONS[layer] )

      if ( os.path.exists( '{}'.format(pathstr)) ):
          traversedir(pathstr)
      else:
          print("Error:", 'directory does not exist {} !'.format(pathstr))
          raise("Error:", 'Missing layer directory!')  

def writebblayersconf(sourcedir, machine):
    f = open(os.path.join(sourcedir, "BUILD-{0}".format(machine), "conf", "bblayers.conf"), 'a')
    f.write('\n')
    xlayer = ""
    for p in PRIORITYORDER:
        for layer in LAYERSPRIORITY:
          if LAYERSPRIORITY[layer] == -1:
            continue
          if xlayer != layer:
            if LAYERSPRIORITY[layer] == p:
               xlayer = layer
               leftside = layer
               leftside = leftside.replace('-','_')
               leftside = leftside.upper()
               if not URLS[layer]:
                    str = "{0}_LAYER ?= \"{1}\" ".format(leftside, LOCATIONS[layer])
               else:
                    str = "{0}_LAYER ?= \"${{PALMDIR}}/{1}\"".format(leftside, COLLECTION_PATH[layer])

               f.write(str)
               f.write('\n')
               break
    f.write('\n')
    f.write('BBFILES ?= ""\n')
    f.write('BBLAYERS ?= " \\')
    f.write('\n')
    xlayer = ""
    for p in PRIORITYORDER:
        for layer in LAYERSPRIORITY:
          if LAYERSPRIORITY[layer] == -1:
            continue
          if xlayer != layer:
            if LAYERSPRIORITY[layer] == p:
               xlayer = layer
               leftside = layer
               leftside = "{}".format(layer)
               leftside = leftside.replace('-','_')
               leftside = leftside.upper()
               f.write("   ${{{0}_LAYER}} \\".format(leftside))
               f.write('\n')
               break
    f.write('  "')
    f.write('\n')
    for layer in LAYERSPRIORITY:
        if LAYERSPRIORITY[layer] <= 0 :
            continue
        f.write("BBFILE_PRIORITY_{0} = \"{1}\"".format(COLLECTION_NAME[layer], LAYERSPRIORITY[layer]))
        f.write('\n')
    f.close


    
def updatelayer ():
    return


if __name__ == '__main__':
   # NB. The exec done by mcf.status causes argv[0] to be an absolute pathname
    progname = sys.argv[0]

    options = getopts()

    if len(options.machines) == 0:
        options.machines += ['qemux86']
        #parser.error('at least one MACHINE argument is required')
    if options.remote:
        urllib.urlretrieve (options.remote, "weboslayers.py")

    if options.trace:
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.DEBUG)
        f = logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')

        s = logging.StreamHandler()
        s.setLevel('DEBUG')

        s.setFormatter(f)
        logging.getLogger('').addHandler(s)

    # Allow ../mcf to work.
    srcdir = os.path.dirname(progname)
    if not os.path.isabs(srcdir):
        lower_dirname = os.path.join('..', srcdir)
    else:
        lower_dirname = srcdir

    configure = os.path.join(lower_dirname, 'configure')

    # read status template, process, write
    
    files = [[os.path.join(srcdir, 'build-templates', 'mcf-status.in'), 'mcf.status'],
             [os.path.join(srcdir, 'Makefile.in'), 'Makefile']]

    cpu_count = 0
    if options.bb_number_threads == 0 or options.parallel_make == 0:
        with open('/proc/cpuinfo', 'r') as f:
            for line in f:
                if line.find('processor') != -1:
                    cpu_count += 1

    if options.bb_number_threads == 0:
        options.bb_number_threads = cpu_count

    if options.parallel_make == 0:
        options.parallel_make = cpu_count

    replacements = [
        ['@bb_number_threads@', '{}'.format(options.bb_number_threads)],
        ['@configure@', configure],
        ['@machines@', ' '.join(options.machines)],
        ['@machines_only@', ' '.join([i.split(':')[0] for i in options.machines])],
        ['@parallel_make@', '{}'.format(options.parallel_make)],
        ['@premirror@', options.premirror],
        ['@distro@', '{}'.format(readdistro(srcdir))],
        ['@buildhistory@', '--{}-buildhistory'.format('enable' if options.buildhistory else 'disable')],
        ['@network@', '--{}-network'.format('enable' if options.network else 'disable')],
        ['@fetchpremirroronly@', '--{}-fetch-premirror-only'.format('enable' if options.fetchpremirroronly else 'disable')],
        ['@generatemirrortarballs@', '--{}-generate-mirror-tarballs'.format('enable'
                                                                            if options.generatemirrortarballs else 'disable')],
        ['@privateinternalcomponentmirror@', '--{}-private-internal-component-mirror'.format('enable'
                                                                            if options.privateinternalcomponentmirror else 'disable')],
        ['@prog@', progname],
        ['@srcdir@', srcdir],
        ]

    for i, j in files:
        process_file(i, j, replacements)

    echo_check_call('/bin/chmod a+x mcf.status', options.verbose)

    for machine in options.machines:
        logger.info('Configuring in BUILD-{}'.format(machine))
        logger.info('configure is {}'.format(configure))

        cmd = '([ -d BUILD-{} ] || mkdir BUILD-{})'.format(machine, machine)
        cmd += ' && (cd BUILD-{} && PWD= @configure@ \
           --enable-bb-number-threads=@bb_number_threads@ \
           --enable-parallel-make=@parallel_make@ \
           --enable-premirror=@premirror@ \
           --enable-distro=@distro@ \
           @buildhistory@ \
           @network@ \
           @fetchpremirroronly@ \
           @privateinternalcomponentmirror@ \
           @generatemirrortarballs@ \
           --build=ubuntu \
           --host={})'.format(machine, machine)

        for i, j in replacements:
            cmd = cmd.replace(i, j)

        echo_check_call(cmd, options.verbose)

        readlayers(srcdir)
        downloadprojects(srcdir,True)
        parseCollections(srcdir)
        writebblayersconf(srcdir, machine)

        logger.info('Done.\n')
